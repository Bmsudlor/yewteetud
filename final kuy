using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;

class Program
{
    static List<User> users = new List<User>();

    static void Main()
    {
        Console.WriteLine("Welcome to the Daily Calorie Calculator Program");
        Console.WriteLine("--------------------------------------------------");
        AddUser();
        while (true)
        {
            Console.WriteLine("\n--- Menu ---");
            Console.WriteLine("1. Add another user");
            Console.WriteLine("2. View user data");
            Console.WriteLine("3. Exit program");
            Console.Write("Please select an option (1-3): ");
            string option = Console.ReadLine().Trim();
            if (option == "1")
            {
                AddUser(); 
            }
            else if (option == "2")
            {
                ViewUserData(); 
            }
            else if (option == "3")
            {
                Console.WriteLine("Thank you for using the program");
                break; 
            }
            else
            {
                Console.WriteLine("Invalid input. Please select a valid option.");
            }
        }
    }

    static void AddUser()
    {
        string name;
        while (true)
        {
            Console.Write("Enter your name (English letters only): ");
            name = Console.ReadLine().Trim();
            if (Regex.IsMatch(name, @"^[A-Za-z]+$")) break;
            Console.WriteLine("\nInvalid input. Please enter English letters only.\n");
        }

        string gender;
        while (true)
        {
            Console.Write("Enter your gender (Male/Female): ");
            gender = Console.ReadLine().Trim().ToLower();
            if (gender == "male" || gender == "female") break;
            Console.WriteLine("\nInvalid input. Please enter 'Male' or 'Female'.\n");
        }

        double weight = GetPositiveInput("Enter your weight (kg): ");
        double height = GetPositiveInput("Enter your height (cm): ") / 100;
        int age = (int)GetPositiveInput("Enter your age: ");
        double bmi = weight / (height * height);
        Console.WriteLine($"\nYour BMI is: {bmi:F2}");

        string bmiCategory;
        if (bmi < 18.5)
        {
            bmiCategory = "Underweight";
            Console.WriteLine("You are underweight. You should consider bulking.");
        }
        else if (bmi < 24.9)
        {
            bmiCategory = "Normal";
            Console.WriteLine("You have a normal weight.");
            HandleNormalBMI(weight, height, age, gender, name, bmi, out bmiCategory);
            return;
        }
        else if (bmi < 29.9)
        {
            bmiCategory = "Overweight";
            Console.WriteLine("You are overweight. You should consider cutting.");
        }
        else
        {
            bmiCategory = "Obese";
            Console.WriteLine("You are obese. You should prioritize weight loss.");
        }

        double targetWeight;
        while (true)
        {
            targetWeight = GetPositiveInput("Enter your target weight (kg): ");
            if ((bmiCategory == "Underweight" && targetWeight > weight) ||
            ((bmiCategory == "Overweight" || bmiCategory == "Obese") && targetWeight < weight))
            {
                Console.WriteLine("Good choice. Your target weight is appropriate.");
                break;
            }
            else
            {
                Console.WriteLine("\nInvalid target weight. Please enter a suitable target weight.\n");
            }
        }

        double bmr = CalculateBMR(gender, weight, height, age);
        double caloriesForWorkout = bmr * 1.55;
        double caloriesForRest = bmr * 1.2;
        User newUser = new User
        {
            Name = name,
            Gender = gender,
            Weight = weight,
            Height = height * 100,
            Age = age,
            BMI = bmi,
            BMICategory = bmiCategory,
            TargetWeight = targetWeight,
            CaloriesForWorkout = caloriesForWorkout,
            CaloriesForRest = caloriesForRest
        };
        users.Add(newUser);
        DisplaySummary(newUser);
    }

    static double GetPositiveInput(string prompt)
    {
        double value;
        while (true)
        {
            Console.Write(prompt);
            if (double.TryParse(Console.ReadLine(), out value) && value > 0)
                return value;
            Console.WriteLine("Invalid input. Please enter a positive number.");
        }
    }

    static void HandleNormalBMI(double weight, double height, int age, string gender, string name, double bmi, out string bmiCategory)
    {
        bmiCategory = "Normal";
        double targetWeight;
        while (true)
        {
            Console.Write("Do you want to bulk? (yes/no): ");
            string response = Console.ReadLine().Trim().ToLower();
            if (response == "yes")
            {
                while (true)
                {
                    targetWeight = GetPositiveInput("Enter your target weight to bulk (kg): ");
                    if (targetWeight > weight)
                    {
                        Console.WriteLine("Good choice! Bulking up can help.");
                        break;
                    }
                    else
                    {
                        Console.WriteLine("\nTarget weight must be greater than your current weight. Please try again.\n");
                    }
                }

                double bmr = CalculateBMR(gender, weight, height, age);
                double caloriesForWorkout = bmr * 1.55;
                double caloriesForRest = bmr * 1.2;
                User newUser = new User
                {
                    Name = name,
                    Gender = gender,
                    Weight = weight,
                    Height = height * 100,
                    Age = age,
                    BMI = bmi,
                    BMICategory = bmiCategory,
                    TargetWeight = targetWeight,
                    CaloriesForWorkout = caloriesForWorkout,
                    CaloriesForRest = caloriesForRest
                };

                users.Add(newUser);
                DisplaySummary(newUser);
                break;
            }
            else if (response == "no")
            {
                Console.WriteLine("Thank you, no changes will be made.");
                break;
            }
            else
            {
                Console.WriteLine("\nInvalid input. Please enter 'yes' or 'no'.\n");
            }
        }
    }

    static double CalculateBMR(string gender, double weight, double height, int age)
    {
        switch (gender)
        {
            case "male":
                return 10 * weight + 6.25 * (height * 100) - 5 * age + 5;
            case "female":
                return 10 * weight + 6.25 * (height * 100) - 5 * age - 161;
            default:
                throw new ArgumentException("Invalid gender specified.");
        }
    }

    static void DisplaySummary(User user)
    {
        Console.WriteLine("\n--- Summary ---");
        Console.WriteLine($"Name: {user.Name}");
        Console.WriteLine($"Gender: {user.Gender}");
        Console.WriteLine($"Current Weight: {user.Weight} kg");
        Console.WriteLine($"Height: {user.Height} cm");
        Console.WriteLine($"Age: {user.Age}");
        Console.WriteLine($"BMI: {user.BMI:F2} ({user.BMICategory})");
        Console.WriteLine($"Target Weight: {user.TargetWeight} kg");
        Console.WriteLine($"Calories for workout days: {user.CaloriesForWorkout:F2} kcal / day");
        Console.WriteLine($"Calories for rest days: {user.CaloriesForRest:F2} kcal / day");
    }

    static void ViewUserData()
    {
        if (users.Count == 0)
        {
            Console.WriteLine("No user data available.");
            return;
        }
        Console.WriteLine("\n--- User Data ---");
        foreach (var user in users)
        {
            DisplaySummary(user);
            Console.WriteLine("-----------------------------------");
        }
    }
}

class User
{
    public string Name { get; set; }
    public string Gender { get; set; }
    public double Weight { get; set; }
    public double Height { get; set; }
    public int Age { get; set; }
    public double BMI { get; set; }
    public string BMICategory { get; set; }
    public double TargetWeight { get; set; }
    public double CaloriesForWorkout { get; set; }
    public double CaloriesForRest { get; set; }
}
